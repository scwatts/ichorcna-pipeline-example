params {
  subject_id            = null
  tumor_id              = null
  normal_id             = null

  tumor_bam             = null
  tumor_bai             = null
  normal_bam            = null
  normal_bai            = null

  publish_dir_mode      = 'symlink'
  output_dir            = null

  wig_gc                = null
  wig_map               = null
  centromeres           = null
  panel_of_normals      = null

  // Pipeline configuration
  hmmcopy_chrs          = 'chr1,chr2,chr3,chr4,chr5,chr6,chr7,chr8,chr9,chr10,chr11,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr20,chr21,chr22,chrX'
  hmmcopy_bin_size      = 1_000_000
  hmmcopy_quality       = '20'
  // Several parameters below are set for low tumor content samples.
  // https://github.com/broadinstitute/ichorCNA/wiki/Parameter-tuning-and-settings
  ichorcna_genome_build = 'hg38'
  ichorcna_genome_style = 'UCSC'
  ichorcna_normal       = '\'c(0.80, 0.85, 0.90, 0.95, 0.99, 0.995, 0.999)\''
  ichorcna_ploidy       = '\'c(2)\''
  ichorcna_maxcn        = '3'
  ichorcna_scprevalence = 'False'
  ichorcna_scstates     = '\'c()\''
  ichorcna_chrs         = '\'paste0(\"chr\", c(1:22))\''
  ichorcna_chrs_train   = '\'paste0(\"chr\", c(1:22))\''
  ichorcna_includehomd  = 'False'
}


process {
  withName: HMMCOPY_READCOUNTER {
    ext.args = """
      --window ${params.hmmcopy_bin_size} \\
      --chromosome ${params.hmmcopy_chrs} \\
      --quality ${params.hmmcopy_quality}
    """.trim()

    publishDir = [
      path: { "${params.output_dir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : "${params.subject_id}/hmmcopy_readcounts/${filename}" }
    ]
  }

  withName: ICHORCNA_RUN {
    ext.args = """
      --genomeBuild ${params.ichorcna_genome_build} \\
      --genomeStyle ${params.ichorcna_genome_style} \\
      --normal ${params.ichorcna_normal} \\
      --ploidy ${params.ichorcna_ploidy} \\
      --maxCN ${params.ichorcna_maxcn} \\
      --estimateScPrevalence ${params.ichorcna_scprevalence} \\
      --scStates ${params.ichorcna_scstates} \\
      --chrs ${params.ichorcna_chrs} \\
      --chrTrain ${params.ichorcna_chrs_train} \\
      --includeHOMD ${params.ichorcna_includehomd}
    """.trim()

    publishDir = [
      path: { "${params.output_dir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename ->
        def base_path = "${params.subject_id}/ichorcna"
        if (filename == 'versions.yml') {
          return null
        } else if (filename.endsWith('.pdf')) {
          return "${base_path}/plots/${filename.tokenize('/').last()}"
        } else {
          return "${base_path}/${filename}"
        }
      }
    ]
  }
}
